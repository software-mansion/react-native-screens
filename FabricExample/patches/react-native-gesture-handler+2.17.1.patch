diff --git a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerTouchEvent.kt b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerTouchEvent.kt
index 61ec853..5eeafd0 100644
--- a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerTouchEvent.kt
+++ b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerTouchEvent.kt
@@ -11,7 +11,7 @@ class RNGestureHandlerTouchEvent private constructor() : Event<RNGestureHandlerT
   private var extraData: WritableMap? = null
   private var coalescingKey: Short = 0
   private fun <T : GestureHandler<T>> init(handler: T) {
-    super.init(UIManagerHelper.getSurfaceId(handler.view), handler.view!!.id)
+    super.init(UIManagerHelper.getSurfaceId(handler.view!!), handler.view!!.id)
     extraData = createEventData(handler)
     coalescingKey = handler.eventCoalescingKey
   }
diff --git a/node_modules/react-native-gesture-handler/android/src/main/jni/cpp-adapter.cpp b/node_modules/react-native-gesture-handler/android/src/main/jni/cpp-adapter.cpp
index 17387ec..770f866 100644
--- a/node_modules/react-native-gesture-handler/android/src/main/jni/cpp-adapter.cpp
+++ b/node_modules/react-native-gesture-handler/android/src/main/jni/cpp-adapter.cpp
@@ -18,9 +18,10 @@ void decorateRuntime(jsi::Runtime &runtime) {
                 if (!arguments[0].isObject()) {
                     return jsi::Value::null();
                 }
-                auto shadowNode = arguments[0]
-                        .asObject(runtime).getNativeState<ShadowNode>(runtime);
-                bool isFormsStackingContext = shadowNode->getTraits().check(ShadowNodeTraits::FormsStackingContext);
+                auto shadowNodeWrapper = arguments[0]
+                        .asObject(runtime).getNativeState<ShadowNodeWrapper>(runtime);
+                bool isFormsStackingContext = shadowNodeWrapper->shadowNode->getTraits()
+                        .check(ShadowNodeTraits::FormsStackingContext);
 
                 return jsi::Value(isFormsStackingContext);
             });
diff --git a/node_modules/react-native-gesture-handler/apple/RNGestureHandlerModule.mm b/node_modules/react-native-gesture-handler/apple/RNGestureHandlerModule.mm
index d36fcf4..9e4cbb6 100644
--- a/node_modules/react-native-gesture-handler/apple/RNGestureHandlerModule.mm
+++ b/node_modules/react-native-gesture-handler/apple/RNGestureHandlerModule.mm
@@ -100,10 +100,16 @@ void decorateRuntime(jsi::Runtime &runtime)
         if (!arguments[0].isObject()) {
           return jsi::Value::null();
         }
-        auto shadowNode = arguments[0].asObject(runtime).getNativeState<ShadowNode>(runtime);
-        bool isFormsStackingContext = shadowNode->getTraits().check(ShadowNodeTraits::FormsStackingContext);
+        auto arg = arguments[0].asObject(runtime);
 
-        return jsi::Value(isFormsStackingContext);
+        if (arg.hasNativeState<ShadowNodeWrapper>(runtime)) {
+          auto shadowNodeWrapper = arg.getNativeState<ShadowNodeWrapper>(runtime);
+          bool isFormsStackingContext =
+              shadowNodeWrapper->shadowNode->getTraits().check(ShadowNodeTraits::FormsStackingContext);
+          return jsi::Value(isFormsStackingContext);
+        }
+
+        return jsi::Value(true);
       });
   runtime.global().setProperty(runtime, "isFormsStackingContext", std::move(isFormsStackingContext));
 }
