
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/rnscreens/RNSScreenEventEmitters.h>

namespace facebook {
namespace react {



void RNSScreenEventEmitter::onAppear(OnAppear event) const {
  dispatchEvent("appear", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void RNSScreenEventEmitter::onDisappear(OnDisappear event) const {
  dispatchEvent("disappear", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void RNSScreenEventEmitter::onDismissed(OnDismissed event) const {
  dispatchEvent("dismissed", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "dismissCount", event.dismissCount);
    return payload;
  });
}
void RNSScreenEventEmitter::onNativeDismissCancelled(OnNativeDismissCancelled event) const {
  dispatchEvent("nativeDismissCancelled", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "dismissCount", event.dismissCount);
    return payload;
  });
}
void RNSScreenEventEmitter::onWillAppear(OnWillAppear event) const {
  dispatchEvent("willAppear", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void RNSScreenEventEmitter::onWillDisappear(OnWillDisappear event) const {
  dispatchEvent("willDisappear", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}
void RNSScreenEventEmitter::onTransitionProgress(OnTransitionProgress event) const {
  dispatchEvent("transitionProgress", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    payload.setProperty(runtime, "progress", event.progress);
payload.setProperty(runtime, "closing", event.closing);
payload.setProperty(runtime, "goingForward", event.goingForward);
    return payload;
  });
}
void RNSScreenEventEmitter::onHeaderBackButtonClicked(OnHeaderBackButtonClicked event) const {
  dispatchEvent("headerBackButtonClicked", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    
    return payload;
  });
}



} // namespace react
} // namespace facebook
